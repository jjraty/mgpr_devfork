// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// compute_predM1_rcpp
Eigen::MatrixXd compute_predM1_rcpp(const Eigen::Map<Eigen::MatrixXd> cy, const Eigen::Map<Eigen::MatrixXd> k, const Eigen::Map<Eigen::MatrixXd> e, const Eigen::Map<Eigen::MatrixXd> ie);
RcppExport SEXP _mgpr_compute_predM1_rcpp(SEXP cySEXP, SEXP kSEXP, SEXP eSEXP, SEXP ieSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type cy(cySEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type k(kSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type e(eSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type ie(ieSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_predM1_rcpp(cy, k, e, ie));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mgpr_compute_predM1_rcpp", (DL_FUNC) &_mgpr_compute_predM1_rcpp, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_mgpr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
